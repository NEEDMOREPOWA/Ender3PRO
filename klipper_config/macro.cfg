########################################################################
#    SHOW_PRINT
########################################################################

[gcode_macro SHOW_PRINT]
description: Moves the extruder out of the way and bed forward
gcode:
    G28
    {% set Z = params.Z|default(50)|int %}
    {% set axis_max = printer.toolhead.axis_maximum %}
    {% set pos = printer.toolhead.position %}
 
    {% set z_diff = axis_max.z - pos.z %}
    {% set z_safe_lift = [ Z, z_diff ] | min%}
    G1 Z{ z_safe_lift }
    G1 X10 Y220 F4000

########################################################################
#    FILAMENT_CHANGE
########################################################################

[gcode_macro FILAMENT_CHANGE]
description: Heats up the extruder to get ready for Filament Change
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set Z = params.Z|default(50)|float %}
  {% set X = params.X|default(117.50)|float %}
  {% set Y = params.Y|default(117.50)|float %}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={200}
  G28
  G1 Z{50} F500
  
########################################################################
#    PRIME_EXTRUDER
########################################################################

[gcode_macro PRIME_EXTRUDER_PLA]
description: Move to left and draw a line to prime extruder
gcode:
    SAVE_GCODE_STATE NAME=prime_extruder_state
    #Home 
    CHECK_HOME
    #Set Bed temp and wait for it to be reached
    M190 S80
    # Reset Extruder to zero
    G92 E0
    # Move Z Axis up
    G1 Z2.0 F3000
    #Set Extruder temp and wait for it to be reached
    M109 S200 T0
    # Move to start position
    G1 X2.0 Y20 Z0.40 F5000.0
    # Draw the first line
    G1 X2.0 Y200.0 Z0.40 F1500.0 E20
    # Move to side a little
    G1 X2.4 Y200.0 Z0.40 F5000.0
    # Draw the second line
    G1 X2.4 Y20 Z0.40 F1500.0 E30
    # Reset Extruder
    G92 E0
    # Move Z Axis up
    G1 Z2.0 F3000
    #Cool down Extruder
    M104 S0
    #Move to center
    G1 X117.5 Y117.5 Z50
    #Cool down Bed
    M140 S0
    RESTORE_GCODE_STATE NAME=prime_extruder_state

[gcode_macro PRIME_EXTRUDER_PETG]
description: Move to left and draw a line to prime extruder
gcode:
    SAVE_GCODE_STATE NAME=prime_extruder_state
    #Home 
    CHECK_HOME
    #Set Bed temp and wait for it to be reached
    M190 S80
    # Reset Extruder to zero
    G92 E0
    # Move Z Axis up
    G1 Z2.0 F3000
    #Set Extruder temp and wait for it to be reached
    M109 S250 T0
    # Move to start position
    G1 X2.0 Y20 Z0.40 F5000.0
    # Draw the first line
    G1 X2.0 Y200.0 Z0.40 F1500.0 E20
    # Move to side a little
    G1 X2.4 Y200.0 Z0.40 F5000.0
    # Draw the second line
    G1 X2.4 Y20 Z0.40 F1500.0 E30
    # Reset Extruder
    G92 E0
    # Move Z Axis up
    G1 Z2.0 F3000
    #Cool down Extruder
    M104 S0
    #Move to center
    G1 X117.5 Y117.5 Z50
    #Cool down Bed
    M140 S0
    RESTORE_GCODE_STATE NAME=prime_extruder_state

########################################################################
#    Home/G28
########################################################################

#[gcode_macro G28]
# Only home if needed.
#rename_existing: G28.1
#gcode:
    #{% if printer.toolhead.homed_axes != "xyz" %}
        #G28.1
    #{% endif %}

########################################################################
#    CHECK_HOME
########################################################################

[gcode_macro CHECK_HOME]
description: "Only home if not already at home position"
gcode:
    {% set pos = printer.toolhead.position %}
    {% set home_x = 117.5 %}  # Adjust based on your bed size
    {% set home_y = 117.5 %}
    {% set home_z = 5.0 %}  # Adjust if needed

    {% if not printer.toolhead.homed_axes or pos.x != home_x or pos.y != home_y or pos.z > (home_z + 1.0) %}
        M117 Homing...
        G28
    {% else %}
        M117 Already at home position
    {% endif %}


    
######################################################################
#    Z_OFFSET
######################################################################

[gcode_macro ZOFFSET_SETUP]
description: Starts Z-Offset Calibration, under 30 degrees Celsius
gcode:
  {% if printer.heater_bed.temperature > 40 %}
    {action_respond_info("Bed temperature too high")}
  {% elif printer.extruder.temperature > 40 %}
    {action_respond_info("Extruder temperature too High")}
  {% else %}
  CHECK_HOME
  PROBE_CALIBRATE
  {% endif %}

[gcode_macro Z_Down_01]
description: Moves Z down by 0.1
gcode:
  TESTZ Z=-.1

[gcode_macro Z_Up_01]
description: Moves Z up by 0.1
gcode:
  TESTZ Z=+.1

[gcode_macro Abort_Setup]
description: Aborts the Z-Offset calibration
gcode:
  ABORT

[gcode_macro ACCEPT_SAVE]
description: Accepts the Z-Offset and saves the config
gcode:
  ACCEPT
  SAVE_CONFIG

[gcode_macro SAVE]
description: Accepts the Z-Offset and saves the config
gcode:
  SAVE_CONFIG

########################################################################
#    SCREW_TILT
########################################################################
[gcode_macro SCREW_TILT_ADJUST]
description: "Heats bed and starts process to level the bed with the screws"
gcode:
    CHECK_HOME

    # Set and heat the bed to the specified temperature (default 80Â°C)
    {% set BED_TEMP = params.BED_TEMP|default(80)|float %} 
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}

    # Wait until the bed reaches the target temperature
    M190 S{BED_TEMP}

    # Optional pause for user confirmation
    M117 "Pausing for user confirmation"
    PAUSE  ; Pauses the macro until user resumes

    # Start the screw tilt adjustment process
    SCREWS_TILT_CALCULATE
########################################################################
#    PID_CALIBRATE
########################################################################

[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(250)|float %} 
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG
 
[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(80)|float %} 
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

########################################################################
#    DISABLE_STEPPERS
########################################################################

[gcode_macro DISABLE_STEPPERS]
description: Disables the printers stepper motors
gcode:
  M84 X Y E

########################################################################
#    BED_MESH_CALIBRATE
########################################################################

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}                                # Gather all object points
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}                                                          # Get bed mesh min from printer.cfg
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}                                                          # Get bed mesh max from printer.cfg
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}                                                        # Get probe count from printer.cfg
    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}                                                                 # Pull variables from _KAMP_Settings
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}                                                                   # Pull verbose setting from _KAMP_Settings
    {% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}                                                             # Pull probe dockable probe settings from _KAMP_Settings
    {% set attach_macro = kamp_settings.attach_macro | string %}                                                                    # Pull attach probe command from _KAMP_Settings
    {% set detach_macro = kamp_settings.detach_macro | string %}                                                                    # Pull detach probe command from _KAMP_Settings
    {% set mesh_margin = kamp_settings.mesh_margin | float %}                                                                       # Pull mesh margin setting from _KAMP_Settings
    {% set fuzz_amount = kamp_settings.fuzz_amount | float %}                                                                       # Pull fuzz amount setting from _KAMP_Settings
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}                                             # If probe count is only a single number, convert it to 2. E.g. probe_count:7 = 7,7
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}                            # Determine max probe point distance
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}                            # Determine max probe point distance
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}                                                # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}                                                # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}                                                # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}                                                # Set y_max from largest object y point

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}                                                   # Adapt x_min to margin and fuzz constraints
    {% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}                                                   # Adapt y_min to margin and fuzz constraints
    {% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}                                                   # Adapt x_max to margin and fuzz constraints
    {% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}                                                   # Adapt y_max to margin and fuzz constraints

    {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}                                                               # Compare adjustments to defaults and choose max
    {% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}                                                               # Compare adjustments to defaults and choose min
    {% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}                                                               # Compare adjustments to defaults and choose min

    {% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}          # Define probe_count's x point count and round up
    {% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}          # Define probe_count's y point count and round up

    {% if (([points_x, points_y]|max) > 6) %}                                                                                       # 
        {% set algorithm = "bicubic" %}                                                                                             # 
        {% set min_points = 4 %}                                                                                                    # 
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            # 
        {% set min_points = 3 %}                                                                                                    # 
    {% endif %}                                                                                                                     # 

    {% set points_x = [points_x , min_points]|max %}                                                                                # Set probe_count's x points to fit the calculated algorithm
    {% set points_y = [points_y , min_points]|max %}                                                                                # Set probe_count's y points to fit the calculated algorithm
    {% set points_x = [points_x , probe_count[0]]|min %}
    {% set points_y = [points_y , probe_count[1]]|min %}

    {% if verbose_enable == True %}                                                                                                 # If verbose is enabled, print information about KAMP's calculations
        {% if printer.exclude_object.objects != [] %}

            { action_respond_info( "Algorithm: {}.".format(                                                                              
                (algorithm),                                                                                                            
            )) }

            { action_respond_info("Default probe count: {},{}.".format(                                                                  
                (probe_count[0]),                                                                                                       
                (probe_count[1]),                                                                                                       
            )) }

            { action_respond_info("Adapted probe count: {},{}.".format(                                                                  
                (points_x),                                                                                                             
                (points_y),                                                                                                             
            )) }                                                                                                              

            {action_respond_info("Default mesh bounds: {}, {}.".format(                                                                  
                (bed_mesh_min[0],bed_mesh_min[1]),                                                                                      
                (bed_mesh_max[0],bed_mesh_max[1]),                                                                                      
            )) }

            {% if mesh_margin > 0 %}                                                                                                    
                {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(                                       
                    (mesh_margin),                                                                                                      
                    (mesh_margin),                                                                                       
                )) }                                                                                                                    
            {% else %}                                                                                                                  
                {action_respond_info("Mesh margin is 0, margin not increased.")}                                                        
            {% endif %}                                                                                                                 

            {% if fuzz_amount > 0 %}                                                                                                    
                {action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(                                     
                    (fuzz_amount),                                                                                                      
                )) }                                                                                                                    
            {% else %}                                                                                                                  
                {action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}                                                      
            {% endif %}                                                                                                                 

            { action_respond_info("Adapted mesh bounds: {}, {}.".format(                                                                 
                (adapted_x_min, adapted_y_min),                                                                                         
                (adapted_x_max, adapted_y_max),                                                                                         
            )) }

            {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}

        {% else %}

            {action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
            G4 P5000                                                                                                                # Wait 5 seconds to make error more visible
        {% endif %}

    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}                                                                                                              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

    {% if probe_dock_enable == True %}
        {detach_macro}                                                                                                              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}     

########################################################################
#    BED_MESH_CALIBRATE
########################################################################

[gcode_macro SET_STARTUP_COMPLETE]
variable_startup_complete: 0
gcode:
    SET_GCODE_VARIABLE MACRO=SET_STARTUP_COMPLETE VARIABLE=set_startup_complete VALUE=1